%
% Very basic grammar for person names
%

SETTINGS:

{
% Modules (currently used Corleone components)
% the 'gazetteerPersons' modules will load the gazetteer defined previously

    MODULES: <CorleoneTokenizer>,<CorleoneBasicTokenizer>,<gazetteerPersons>

    %SEARCH_MODE: all_longest_matches
    SEARCH_MODE: longest_match
    %SEARCH_MODE: all_match
    % Output

    OUTPUT: grammar
}

PATTERNS:

% Example 1
% This is a basic pattern for detecting person names based on known first names,
% followed by 1 to 3 first capital words identified thanks to the tokenizer.
% The surface of identified tokens are kept by defining them as 'variables' in the rule (#last_name).
% These variable are "feeding" a new feature structure "person" composed of NAME, FIRST_NAME, LAST_NAME and RULE.
% The NAME attribute of the type "person" is built by aplying a concatenation of the first and last name
% (thanks to a grammar functional operator called "ConcWithBlanks")


person_name_rule1  :>  (gaz_given_name & [SURFACE: #base_form]
                         (token & [TYPE: "first_capital_word", SURFACE: #last_name])<1,3>):name
-> name: person & [NAME: #full_name, FIRST_NAME: #base_form, LAST_NAME: #last_name, RULE: "person_name_rule1"]
& #full_name := ConcWithBlanks(#base_form,#last_name).


% Example 2: Director Kowalski or  Director A. Kowalski or Director A. B. Kowalski or Director A. de Kowalski
% This rule tries to identify person names composed of: a title, recognized thanks to the gazetteer
% optionally followed by an initial (coming from the gazetteer) plus the token "." OR followed by 2 initials (lines 46 to 50)
% followed by a capitalized token (lines 51-52)
% followed by an optional infix (line 53)
% followed by a capitalized token (lines 54-57), identified as the last name

person_name_rule2 :> ((gaz_title & [SURFACE: #title])
                      ( (gaz_initial & [SURFACE: #initial_1] token & [SURFACE: "."])
                         | (gaz_initial & [SURFACE: #initial_1]
                            token & [SURFACE: "."]
                            gaz_initial & [SURFACE: #initial_2]
                            token & [SURFACE: "."])) ?
                      (token & [TYPE: "first_capital_word", SURFACE: #first_name]
                         | token & [TYPE: "word_with_hyphen_first_capital", SURFACE: #first_name])
                      (gaz_name_infix & [SURFACE: #infix]) ?
                      (token & [TYPE: "first_capital_word", SURFACE: #last_name]
                        | (token & [TYPE: "mixed_word_first_capital", SURFACE: #last_name])
                        | (token & [TYPE: "word_with_hyphen_first_capital", SURFACE: #last_name])
                        | (token & [TYPE: "word_with_apostrophe_first_capital", SURFACE: #last_name]))?):name
-> name: person & [NAME: #full_name, FIRST_NAME: #first_name, LAST_NAME: #last_name_final, INITIAL:#initial, TITLE: #title, RULE: "person_name_rule2"]
& #last_name_final :=ConcWithBlanks(#infix, #last_name)
& #initial := PersonNameInitial(#initial_1,#initial_2)
& #full_name := ConcWithBlanks(#initial,#first_name,#infix,#last_name).


% Example 3: Try to write a rule which recognizes sequence of: [title - capitalized word - capitalized word]


END_PATTERNS:
